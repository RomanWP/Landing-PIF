@mixin decoration-off() {
  &:hover,
  &:focus,
  &:active {
    text-decoration: none;
  }
  text-decoration: none;
}

@mixin a-center($position) {
  position: absolute;
  @if $position == 'v' {
    top: 50%;
    transform: translateY(-50%);
  }
  @else if $position == 'h' {
    left: 50%;
    transform: translate(-50%);
  }
  @else if $position == 'vh' {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

@mixin m-center($mt, $mb, $width) {
    margin: $mt auto $mb;
	max-width: $width;
}

@mixin background-cover() {
  background-size: cover;
  background-repeat: no-repeat;
}

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

@mixin background-gradient($start-color, $end-color, $orientation) { 
    background: $start-color;
    @if $orientation == 'v' {
      background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation == 'h' {
      background: linear-gradient(to right, $start-color, $end-color);
    } @else {
      background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) { 
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + '.eot');
    src: url($file-name + '.eot?#iefix')  format('embedded-opentype'),
         url($file-name + '.woff') format('woff'),
         url($file-name + '.ttf')  format('truetype'),
         url($file-name + '.svg##{$font-name}')  format('svg');
    font-weight: $weight;
    font-style: $style;
  }
}
//Usage
//@include font-face('gotham', '/fonts/gotham');